<!DOCTYPE html>
<html lang="en">
<head>
  <% include ../partials/head %>
  <% include ../partials/scripts %>
  <% include ../partials/css %>
  <!-- <script src="scripts/tag_help.js" type="text/javascript">//this is for displaying tutorial through utube</script> -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>A simple example</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/pannellum@2.5.6/build/pannellum.css">
    <script type="text/javascript" src="scripts/dev_pannellum.js"></script>
    <style>
    #panorama {
    width: 100%;
    height: 100vh; 
    text-align: center;
    }
    #controls {
        position: absolute;
        bottom: 0;
        left: 0;
        z-index: 2;
        text-align: center;
        width: 100%;
        padding-bottom: 20px;
    }
    .ctrl {
        padding: 8px 5px;
        text-align: center;
        background: #6d6d6d;
        display: block;
        cursor: pointer;
        font-size: 20px;
    }
    .ctrl:hover {
        background: rgba(200, 200, 200, 1);
    }
    .wrapper {
      display:flex;
      width: 100%;
      align-items: stretch;
    }
    #sidebar {
      min-width: 250px;
      max-width: 250px;
      min-height: 100vh;
      background: #57068c;
      color: #fff;
      
    }
    #err p{
      color: #f00202;
    }
    #sidebar .sidebar-header{
      padding: 20px;
      background: #8900e1;
    }
    #sidebar ul.components {
      padding:20px 0;
      border-bottom: 1px solid #6d6d6d;
    }
    
    #sidebar ul li {
      padding-top: 10px;
    }
    
    ul.CTAs {
      padding: 15px;
    }
    .sctrl{
      padding: 8px 5px;
      text-align: center;
      font-size: 20px !important;
      display: block;
      border-radius: 5px;
      margin-bottom: 5px;
      cursor: pointer;
    }
    #tagSubmit.sctrl{
      background: #4fd84f;
    }
    #tagSubmit.sctrl:hover{
      background: #6bee6b;
    }
    #tagHelp.sctrl{
      background: #fff !important;
      color: #6d6d6d !important;
    }
    #tagHelp.sctrl:hover{
      background: rgb(196, 192, 192) !important;
    }
    #YTplayer {
      max-width: 513px;
      max-height: 288.6px;
    }
    .content {
      max-width: 513px;
    }
    legend {
      font-size: 16px;
      padding-bottom: 5px;
    }
    input[type=range] {
      -webkit-appearance: none;
      margin: 10px 0;
      width: 100%;
    }
    input[type=range]:focus {
      outline: none;
    }
    input[type=range]::-webkit-slider-runnable-track {
      width: 100%;
      height: 12.8px;
      cursor: pointer;
      box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;
      background: #957d97d7;
      border-radius: 25px;
      border: 0px solid #000101;
    }
    input[type=range]::-webkit-slider-thumb {
      box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;
      border: 0px solid #000000;
      height: 20px;
      width: 39px;
      border-radius: 7px;
      background: #65001c;
      cursor: pointer;
      -webkit-appearance: none;
      margin-top: -3.6px;
    }
    input[type=range]:focus::-webkit-slider-runnable-track {
      background: #ac51b5;
    }
    input[type=range]::-moz-range-track {
      width: 100%;
      height: 12.8px;
      cursor: pointer;
      animate: 0.2s;
      box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;
      border-radius: 25px;
      background: #957d97d7;
      border: 0px solid #000101;
    }
    input[type=range]::-moz-range-thumb {
      box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;
      border: 0px solid #000000;
      height: 20px;
      width: 39px;
      border-radius: 7px;
      background: #65001c;
      cursor: pointer;
    }
    input[type=range]::-ms-track {
      width: 100%;
      height: 12.8px;
      cursor: pointer;
      animate: 0.2s;
      background: transparent;
      border-color: transparent;
      border-width: 39px 0;
      color: transparent;
    }
    input[type=range]::-ms-fill-lower {
      background: #7a997ed7;
      border: 0px solid #000101;
      border-radius: 50px;
      box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;
    }
    input[type=range]::-ms-fill-upper {
      background: #957d97d7;
      border: 0px solid #000101;
      border-radius: 50px;
      box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;
    }
    input[type=range]::-ms-thumb {
      box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;
      border: 0px solid #000000;
      height: 20px;
      width: 39px;
      border-radius: 7px;
      background: #65001c;
      cursor: pointer;
    }
    input[type=range]:focus::-ms-fill-lower {
      background: #ac51b5;
    }
    input[type=range]:focus::-ms-fill-upper {
      background: #ac51b5;
    }
    .slider_div{
      background: linear-gradient(#000, #000) no-repeat center/2px 100%;
      padding-top:1px;
      padding-bottom:1px;
    }
    @media (max-width: 500px) {
      #YTplayer {
        max-width: 352px;
        max-height: 200px;
      }
      .content {
        max-width: 352px;
      }
    }

    @media (min-width: 992px) {
      #YTplayer {
        max-width: 673px;
        max-height: 378.6px;
      }
      .content {
        max-width: 673px;
      }
    }

    @media (min-width: 1200px) {
      #YTplayer {
        max-width: 833px;
        max-height: 468.6px;
      }
      .content {
        max-width: 833px;
      }
    }
    </style>
</head>
<body>
  <header>
    <%- include('../partials/header-'.concat(auth?'':'no').concat('auth')) %>
  </header>
  <main>
    <!-- Set up Custom Modal -->
    <div id="err" style="text-align:center;">
      <% if (errmsg) {%>
        <p> <%= errmsg %> </p>
      <% } %>
    </div>
    <div class="wrapper">
      
      <!-- viewer-->
      <div id="panorama"></div>

      <!-- Sidebar -->
      <div id="sidebar">
        <div class="sidebar-header">
          <h3>Brooklyn Atlantis Tagging System</h3>
        </div>

        <ul class="list-unstyled components">
          <li>
            <div class="ctrl" id="hs-toggle" title="Toggle Hot Spot Visibility">&#128065; Hide all tags </div> 
          </li>
          <li>  
            <div class="ctrl" id="delete-all-hs" title="Delete All Hot Spots">&#10060; Delete all tags </div>
          </li>
          <li>
            <h4 id="currentTagAmount"> Current amount of tags created: 0</h4>
          </li>
        </ul>

        <ul class="list-unstyled CTAs">
          <li>
            <div class="sctrl" id="tagSubmit" title="Submit and Go To Next Picture"> &#10004; Submit the picture and go to the next</div>
          </li>

          <li>
            <div class="sctrl" id="tagHelp" title="Help me"> &#10068; Tutorial</div>
          </li>
          <li>
            
          </li>
        </ul>
      </div>

      <!-- modal window-->
      <% include ../partials/modal %>




    </div>




    <div id="pic" data-pic =<%= pic %> ></div>
    <script>
    var submitted = false;
    v = pannellum.viewer('panorama', {
        "type": "equirectangular",
        "panorama": "360images/"+ (document.getElementById('pic').dataset.pic+".jpg"),
        "showControls": false,
        /*
         * Uncomment the next line to print the coordinates of mouse clicks
         * to the browser's developer console, which makes it much easier
         * to figure out where to place hot spots. Always remove it when
         * finished, though.
         */
        //"hotSpotDebug":"true",

        /*"hotSpots": [
            {
                "pitch": 14.7,
                "yaw": 178.5,
                "type": "info",
                "text": "I have no idea what these two things are, I assume they are lights?",
                
            }
        ] */
    });
  function post(params, method) {
    method = method || "post"; // Set method to post by default if not specified.

    // The rest of this code assumes you are not using a library.
    // It can be made less wordy if you use one.
    var form = document.createElement("form");
    form.setAttribute("method", method);

    for(var key in params) {
      if(params.hasOwnProperty(key)) {
        var hiddenField = document.createElement("input");
        hiddenField.setAttribute("type", "hidden");
        hiddenField.setAttribute("name", key);
        hiddenField.setAttribute("value", params[key]);
        form.appendChild(hiddenField);
      }
    }
    document.body.appendChild(form);
    form.submit();
  };


    
    document.getElementById('hs-toggle').addEventListener('click', function(e) {
        v.toggleHS();
    });
    document.getElementById('delete-all-hs').addEventListener('click', function(e) {
        $('#deleteAllTags').modal({backdrop:'static'});
        //calls the modal window for deleting all hs 

    });
    
    function submitAll() {
      responseArray = v.submit()
      submitted = true;
      //responseArray is in the format of [[name1,x1,y1],[name2,x2,y2]...]
      var currentdate = new Date(); 
      var datetime = currentdate.getUTCDate() + "/" + (currentdate.getUTCMonth()+1)  + "/" + currentdate.getUTCFullYear() + " @ "  + currentdate.getUTCHours() + ":"  + currentdate.getUTCMinutes() + ":" + currentdate.getUTCSeconds();
      post({
      pic: (document.getElementById('pic').dataset.pic), //pass the name of the picture
      tag_list: JSON.stringify(responseArray),
      time: datetime
      });
    }

    document.getElementById('tagSubmit').addEventListener('click', function(e) {
      if (v.getHSamount() === 0)
      {
        $('#submitTagsText').html("Wow ,You have zero tags created, you should only submit when you think there are no objects that's of interest. Are you sure?");
      }
      else{
        $('#submitTagsText').html("So, you are satisfied with all the tags you have created for this image and is ready to move on to the next image? (You WON'T be able to come back to this image later)");
      }
      $('#submitAllTags').modal({backdrop:'static'});
    });
        
  

    document.getElementById('tagHelp').addEventListener('click', function(e) {
      $('#helpModal').modal();
    })

    



    /*
    $('body').on('click', '.btn-add-hotspot', function() {
        var inputText = "example hotspot text";
        var currentPitch = v.getPitch();
        var currentYaw = v.getYaw();
        v.addHotSpot({"pitch":currentPitch, "yaw":currentYaw, "type":"info", "text":inputText});
        console.log('Hotspots are added at pitch: ' + currentPitch + '; yaw: ' + currentYaw);
    });


    function hugeBruh() {
      var inputText = "example hotspot text";
        var currentPitch = v.getPitch();
        var currentYaw = v.getYaw();
        v.addHotSpot({"pitch":currentPitch, "yaw":currentYaw, "type":"info", "text":inputText});
        console.log('Hotspots are added at pitch: ' + currentPitch + '; yaw: ' + currentYaw);
    } */
    </script>
    <!-- Socket Stuff-->
    <script src="/socket.io/socket.io.js"></script> 
    <script>
      var opts  = {};
      opts['sync disconnect on unload'] = false;

      var socket = io.connect(window.location.host,opts);
      socket.on('connect',function(data){
        socket.emit('join','Hello world from tagging page.');
      });

      socket.on('messages', function(data){
        console.log(data);
      })

      var loaded = false;
      var startTime;
      var idleTime = 0;
      var idlePos = [0,0];
      var fileInfo = new Object();
      fileInfo.id = <%= id %> ;
      fileInfo.pic = "<%= pic %>";

      const maxAFKtime = 1000 * 60 * 0.5; //the maximum amount of time the player can afk before the data stops collecting
      const interval = 20; //how often we check the status of the window in ms

      var dataList = [];
      $(".pnlm-load-button").one("click",function(){
        loaded = true;
        startTime = new Date();
        fileInfo.timeStamp = startTime.getUTCDate() + "_" + (startTime.getUTCMonth()+1)  + "_" + startTime.getUTCFullYear() + " @ "  + startTime.getUTCHours() + ":"  + startTime.getUTCMinutes() + ":" + startTime.getUTCSeconds();
        var sendData = setInterval(function record(){
          let dt = new Date();
          timeSinceStart = dt.getTime() - startTime.getTime();

          let rawData = {
            time: timeSinceStart,
            pitch: v.getPitch(),
            yaw: v.getYaw(),
            hfov: v.getHfov()
          }

          if (rawData.yaw == idlePos[0] && rawData.pitch == idlePos[1]) {
            idleTime += interval;
            console.log("afk time: " + idleTime);
          } else{
            console.log(rawData.yaw + ", "+ rawData.pitch + " not the same as " + idlePos);
            idleTime = 0;
            idlePos = [rawData.yaw,rawData.pitch];
          }

          if (idleTime < maxAFKtime) {
            dataList.push(rawData);
            console.log(rawData);
            console.log("user id: " + fileInfo.id + ", pic name: " + fileInfo.pic);
            console.log("---------------------");
          } else {
            console.log("user is afk right now zzzzzz, no data is pushed");
            console.log("---------------------");
          }

        

        },interval);


      });
      function waitMs(ms) {
        var start = Date.now()
        var now = start;
        while(now - start < ms){
            now = Date.now()
        }  
      }
      window.onbeforeunload = function() {
        if (dataList.length > 0) {
          let dataObject = {
            info: fileInfo,
            data: dataList
          }

          let specialDataObject = {
            info: fileInfo,
            data: specialDataList
          }

          let myObject = {
            data: dataObject,
            specialData: specialDataObject
          }
          if (submitted == true) {
            socket.emit('createTagSubmitted',myObject);
            //socket.emit("createTagSubmittedTrajectory",dataObject);
            //socket.emit("createTagSubmittedEvent",specialDataObject);
          } else {
            if (v.getHSamount() > 0) {
              return ("are you sure?");
            }
          }
        } 
      }

      window.onunload = function() {
        if (submitted == false && loaded == true) {
          let dataObject = {
            info: fileInfo,
            data: dataList
          }

          let specialDataObject = {
            info: fileInfo,
            data: specialDataList
          }

          socket.emit("createTagUnsubmittedTrajectory",dataObject);
          socket.emit("createTagUnsubmittedEvent",specialDataObject);
        }
        socket.emit('dataLogger', [<%- id %>, "exit", "tag", "<%- pic %>"]);

        
      }

      //speical data handling
      var specialDataList = [];

      if ('<%= pic %>' == 'img4' && <%= survey_completion %> == 0) {
        $('#surveyModal').modal({
          backdrop: 'static'
        });
      }

    </script>
  </main>
  <footer>
    <br>
    <br>
    <% include ../partials/footer %>
  </footer>

</body>
</html>